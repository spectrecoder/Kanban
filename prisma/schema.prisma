// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    name           String?
    email          String?   @unique
    hashedPassword String?
    emailVerified  DateTime?
    image          String?
    imageID        String?
    accounts       Account[]
    sessions       Session[]
    boards         Board[]

    usage                  Int       @default(0)
    usageLimit             Int       @default(5)
    plan                   String    @default("free")
    stripeCustomerId       String?   @unique
    stripePriceId          String?   @unique
    stripeCurrentPeriodEnd DateTime?
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Board {
    id           String        @id @default(auto()) @map("_id") @db.ObjectId
    title        String
    createdAt    DateTime      @default(now())
    boardColumns BoardColumn[]
    user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String        @db.ObjectId
}

model BoardColumn {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    columnColor String
    order       Int
    createdAt   DateTime @default(now())
    board       Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
    boardId     String   @db.ObjectId
    tasks       Task[]
}

model Task {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    description String?
    createdAt   DateTime @default(now())
    order       Int

    subTasks SubTask[]

    boardColumn   BoardColumn @relation(fields: [boardColumnId], references: [id], onDelete: Cascade)
    boardColumnId String      @db.ObjectId
}

model SubTask {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    title     String
    completed Boolean  @default(false)
    createdAt DateTime @default(now())
    Task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId    String   @db.ObjectId
}
