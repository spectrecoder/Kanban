import { useAutoAnimate } from "@formkit/auto-animate/react";
import { Eye } from "lucide-react";
import Head from "next/head";
import DeleteBoard from "~/components/DeleteBoard";
import DeleteTask from "~/components/DeleteTask";
import EditBoard from "~/components/EditBoard";
import EditTask from "~/components/EditTask";
import Sidebar from "~/components/Sidebar";
import TaskCard from "~/components/TaskCard";
import { useSidebar } from "~/lib/hooks/use-sidebar";
import CreateBoard from "./CreateBoard";

interface Props {
  children: JSX.Element;
}

export default function Layout({ children }: Props) {
  const [parent] = useAutoAnimate();
  const [showSidebar, openSidebar] = useSidebar((state) => [
    state.isOpen,
    state.onOpen,
  ]);

  return (
    <>
      <Head>
        <title>Kanban task management</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="relative flex h-screen">
        <section ref={parent}>
          {showSidebar ? (
            <Sidebar />
          ) : (
            <button
              onClick={openSidebar}
              className={`absolute bottom-10 left-0 z-20 w-14 rounded-r-full bg-main-color py-3 pl-5 text-white transition-all duration-300 dark:bg-main-background dark:hover:bg-main-color`}
            >
              <Eye className="h-[1.2rem] w-[1.2rem]" />
            </button>
          )}
        </section>
        {children}

        <CreateBoard />
        <EditBoard />
        <DeleteBoard />
        <TaskCard />
        <EditTask />
        <DeleteTask />
      </main>
    </>
  );
}

// function AuthShowcase() {
//   const { data: sessionData } = useSession();

//   const { data: secretMessage } = api.example.getSecretMessage.useQuery(
//     undefined, // no input
//     { enabled: sessionData?.user !== undefined }
//   );

//   return (
//     <div className="flex flex-col items-center justify-center gap-4">
//       <p className="text-2xl text-center text-white">
//         {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
//         {secretMessage && <span> - {secretMessage}</span>}
//       </p>
//       <button
//         className="px-10 py-3 font-semibold text-white no-underline transition rounded-full bg-white/10 hover:bg-white/20"
//         onClick={sessionData ? () => void signOut() : () => void signIn()}
//       >
//         {sessionData ? "Sign out" : "Sign in"}
//       </button>
//     </div>
//   );
// }
